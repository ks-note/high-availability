
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prod-user-api
  namespace: prod
  labels:
    app: prod-user-api  
    version: "v1"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: prod-user-api
  template:
    metadata:
      labels:
        app: prod-user-api 
    spec:
        
      terminationGracePeriodSeconds: 60  
      restartPolicy: Always  
      containers:
        - name: user-api
          image: xxxxxxxxx/prod-user-api:1
          imagePullPolicy: Always
          ports: 
            - name: http
              containerPort: 80
              protocol: TCP 

          # 合理设置 Request 与 Limit：可以避免某些Pod消耗过多资源，导致节点过载或其他Pod资源不足，确保集群中的每个Pod都能获得公平的资源分配
          resources:
            requests:
              cpu: "16m"
              memory: "160M"
            limits:
              cpu: "64m"
              memory: "256M"

          # 合理设置 terminationGracePeriodSeconds 和 preStop 钩子：通过配置 terminationGracePeriodSeconds 和 preStop 钩子，可以确保旧 Pod 在终止前有足够的时间完成清理工作，并确保新 Pod 准备就绪    
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 30"]

      affinity: 
        
        # 节点组调度 不同类型的应用对资源的需求往往不同，使用节点亲和策略将这些应用分配到不同的节点组，可以根据其特定需求配置节点资源，从而提高资源利用率和应用性能
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-group
                operator: In
                values:                 
                - business 
        
        podAntiAffinity:
          
          # 打散 Pod 调度 使用反亲和策略打散 Pod 调度到不同一个节点，避免单节点故障
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector: 
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - prod-user-api 
              topologyKey: "kubernetes.io/hostname"

          startupProbe:
            httpGet:
              path: /api/users/health-check.html
              port: 80
              scheme: HTTP
            initialDelaySeconds: 1
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30 
          
          livenessProbe:
            httpGet:
              path: /api/users/health-check.html
              port: 80
              scheme: HTTP
            initialDelaySeconds: 90
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
           
          # Readiness  Probe 用于检测 Pod 是否已经准备好接收流量。通过配置 Readiness Probe，可以确保只有在 Pod 完全准备好后，才会接收流量，从而避免服务中断
          readinessProbe:
            httpGet:
              path: /api/users/health-check.html
              port: 80
              scheme: HTTP
            initialDelaySeconds: 90
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          
        

     
